// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.2
// source: proto/Tracker.proto

package omggolib

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	TrackerService_SubscribeTransactions_FullMethodName     = "/tracker.TrackerService/SubscribeTransactions"
	TrackerService_SendTrackedAccountRequest_FullMethodName = "/tracker.TrackerService/SendTrackedAccountRequest"
)

// TrackerServiceClient is the client API for TrackerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TrackerServiceClient interface {
	SubscribeTransactions(ctx context.Context, in *SubscribeTransactionInfoStreamRequest, opts ...grpc.CallOption) (TrackerService_SubscribeTransactionsClient, error)
	SendTrackedAccountRequest(ctx context.Context, in *TrackedAccountRequest, opts ...grpc.CallOption) (*TrackedAccountResponse, error)
}

type trackerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTrackerServiceClient(cc grpc.ClientConnInterface) TrackerServiceClient {
	return &trackerServiceClient{cc}
}

func (c *trackerServiceClient) SubscribeTransactions(ctx context.Context, in *SubscribeTransactionInfoStreamRequest, opts ...grpc.CallOption) (TrackerService_SubscribeTransactionsClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TrackerService_ServiceDesc.Streams[0], TrackerService_SubscribeTransactions_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &trackerServiceSubscribeTransactionsClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TrackerService_SubscribeTransactionsClient interface {
	Recv() (*TransactionInfoResponse, error)
	grpc.ClientStream
}

type trackerServiceSubscribeTransactionsClient struct {
	grpc.ClientStream
}

func (x *trackerServiceSubscribeTransactionsClient) Recv() (*TransactionInfoResponse, error) {
	m := new(TransactionInfoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *trackerServiceClient) SendTrackedAccountRequest(ctx context.Context, in *TrackedAccountRequest, opts ...grpc.CallOption) (*TrackedAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TrackedAccountResponse)
	err := c.cc.Invoke(ctx, TrackerService_SendTrackedAccountRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TrackerServiceServer is the server API for TrackerService service.
// All implementations must embed UnimplementedTrackerServiceServer
// for forward compatibility
type TrackerServiceServer interface {
	SubscribeTransactions(*SubscribeTransactionInfoStreamRequest, TrackerService_SubscribeTransactionsServer) error
	SendTrackedAccountRequest(context.Context, *TrackedAccountRequest) (*TrackedAccountResponse, error)
	mustEmbedUnimplementedTrackerServiceServer()
}

// UnimplementedTrackerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTrackerServiceServer struct {
}

func (UnimplementedTrackerServiceServer) SubscribeTransactions(*SubscribeTransactionInfoStreamRequest, TrackerService_SubscribeTransactionsServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeTransactions not implemented")
}
func (UnimplementedTrackerServiceServer) SendTrackedAccountRequest(context.Context, *TrackedAccountRequest) (*TrackedAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTrackedAccountRequest not implemented")
}
func (UnimplementedTrackerServiceServer) mustEmbedUnimplementedTrackerServiceServer() {}

// UnsafeTrackerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TrackerServiceServer will
// result in compilation errors.
type UnsafeTrackerServiceServer interface {
	mustEmbedUnimplementedTrackerServiceServer()
}

func RegisterTrackerServiceServer(s grpc.ServiceRegistrar, srv TrackerServiceServer) {
	s.RegisterService(&TrackerService_ServiceDesc, srv)
}

func _TrackerService_SubscribeTransactions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeTransactionInfoStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TrackerServiceServer).SubscribeTransactions(m, &trackerServiceSubscribeTransactionsServer{ServerStream: stream})
}

type TrackerService_SubscribeTransactionsServer interface {
	Send(*TransactionInfoResponse) error
	grpc.ServerStream
}

type trackerServiceSubscribeTransactionsServer struct {
	grpc.ServerStream
}

func (x *trackerServiceSubscribeTransactionsServer) Send(m *TransactionInfoResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TrackerService_SendTrackedAccountRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrackedAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackerServiceServer).SendTrackedAccountRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrackerService_SendTrackedAccountRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackerServiceServer).SendTrackedAccountRequest(ctx, req.(*TrackedAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TrackerService_ServiceDesc is the grpc.ServiceDesc for TrackerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TrackerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tracker.TrackerService",
	HandlerType: (*TrackerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendTrackedAccountRequest",
			Handler:    _TrackerService_SendTrackedAccountRequest_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeTransactions",
			Handler:       _TrackerService_SubscribeTransactions_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/Tracker.proto",
}
